// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id           Int       @id @default(autoincrement())
  primary_name String    @db.VarChar(20)
  second_name  String    @db.VarChar(20)
  email        String    @unique @db.VarChar(100)
  password     String    @db.VarChar(240)
  created_at   DateTime  @default(now())
  desktops     desktop[] @relation("UserToDesktop")
  comment      comment[]
  // card         card?     @relation(fields: [cardId], references: [id])
  card         card[]    @relation("UserToCard")
  cardId       Int?

  task   task[] @relation("UserToTask")
  taskId Int?

  avatar file[]
}

model desktop {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(200)
  created_at     DateTime    @default(now())
  link_access    String      @db.VarChar(240)
  created_by     String      @db.VarChar(80)
  card           card[]
  user_id        Int?
  user_email     String      @db.VarChar(200)
  created        Boolean?
  membersDesktop users[]     @relation("UserToDesktop")
  groupDesktop   groupCard[] @relation("groupToDesktop")
}

model card {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(200)
  description   String?   @db.Text()
  created_at    DateTime  @default(now())
  delivery_date DateTime?

  desktop     desktop? @relation(fields: [desktopId], references: [id])
  desktopId   Int?
  membersCard users[]  @relation("UserToCard")

  groupeCard groupCard[] @relation("goupeToCard")
  listTask   list[]
  comment    comment[]
  file       file[]      @relation("FileToCard")
}

model list {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(60)
  created_at DateTime @default(now())

  card   card?  @relation(fields: [cardId], references: [id])
  cardId Int?
  task   task[]
}

model task {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(60)
  created_at    DateTime  @default(now())
  delivery_date DateTime?
  done          Boolean   @default(false)

  membersTask users[] @relation("UserToTask")
  taskList    list?   @relation(fields: [listId], references: [id])
  listId      Int?
}

model comment {
  id           Int      @id @default(autoincrement())
  userComment  users?   @relation(fields: [userId], references: [id])
  userId       Int
  userName     String   @db.VarChar(140)
  userAvatar   String   @db.Text
  comment_text String   @db.Text
  created_at   DateTime @default(now())

  card   card? @relation(fields: [cardId], references: [id])
  cardId Int?
}

model file {
  id            Int      @id @default(autoincrement())
  fileName      String   @db.VarChar(240)
  fileNameBd    String   @db.VarChar(240)
  url           String   @db.VarChar(240)
  created_at    DateTime @default(now())
  contentLength Int
  contentType   String

  users   users? @relation(fields: [usersId], references: [id])
  usersId Int?
  card    card[] @relation("FileToCard")
}

model groupCard {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(100)
  created_at DateTime @default(now())

  cards    card[]    @relation("goupeToCard")
  desktops desktop[] @relation("groupToDesktop")
}
